AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Rikolti metadata_fetcher and metadata_mapper

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
Parameters:
  NuxeoApiToken:
    Description: Token for Nuxeo API
    Type: String
    Default: '{{resolve:secretsmanager:rikolti/nuxeo_auth:SecretString:token}}'
Resources:
  MetadataFetcherFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: fetch_metadata
      CodeUri: metadata_fetcher/
      Handler: lambda_function.fetch_collection
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          NUXEO: !Ref NuxeoApiToken
          S3_BUCKET: rikolti
      Role: !GetAtt MetadataFetcherFunctionRole.Arn
  MetadataMapperShepherdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: shepherd_mappers
      CodeUri: metadata_mapper/
      Handler: lambda_shepherd.map_collection
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          SKIP_UNDEFINED_ENRICHMENTS: True
  MetadataMapperMapPageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: map_metadata
      CodeUri: metadata_mapper/
      Handler: lambda_function.map_page
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          SKIP_UNDEFINED_ENRICHMENTS: True
  MetadataFetcherFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: sam-metadata-fetcher-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [
                  's3:PutObject',
                  's3:GetObject',
                  'lambda:InvokeFunction',
                  'logs:*',
                  's3:ListBucket',
                  's3:PutObjectAcl'
                ]
                Resource: '*'

