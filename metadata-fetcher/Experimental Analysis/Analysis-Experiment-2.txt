Hi Lisa, Adrian, Brian, and Barbara,

When we last checked in, I'd been working to validate Spark as an effective tool for mapping metadata from source institutions to the UCLDC model. I was specifically addressing this issue with Spark: 

    Glue (effectively AWS-flavored Spark) infers a schema over the data it reads. The schema that Glue infers must be consistent across all records and collections using the same mapper to migrate our existing Harvester 1 mappers to Rikolti mappers.   

For our experiment, I was going to run OAC and OAI harvests using the Datel application to replace the xmltojson module for converting XML to JSON to ensure that the resulting metadata produced table schemas (and cross-table schemas) that were compatible with our mapper architecture, addressing problem 2.

Brian made a number of updates to Datel and it is now both a command line application and a pure-python module, making it easy to deploy to AWS Lambda, and easy to integrate into the existing OAC fetcher. I was able to quickly and easily accomplish the following: 

1. Modify the existing OAC fetcher to use datel instead of xmltodict
2. Create JSON payloads for kicking off the metadata fetching process for all OAC collections
3. Run the OAC fetchers across all OAC collections
4. Run the Glue Crawler across all OAC collections to produce one table per collection
5. Run AWS command `aws glue get-tables --database-name 'rikolti-test'` to get table definitions for all OAC for analysis. 

For the analysis, I was able to discover:
 - There are 242 unique column sets for OAC collections
 - The union of field names
 - The intersection of field names
 - The variation in representation of these fields

Writing a single mapper that checks to see if a column exists in a spark data frame and maps it if it does but otherwise ignores it is relatively straightforward: 
https://github.com/ucldc/rikolti/blob/main/spark-mapper/oac_mapper.py#L255

For many fields, though, there is still variance across collections, even while using the datel module over the xmltodict module. It does look like there is *less* variance though. 

